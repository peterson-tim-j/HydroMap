# Plot the depth to water table of the prediction and training data
png('Example1_pointData_A.png')
sp::spplot(predictionData, 'DTWT.cats',scales = list(draw = TRUE), main='Prediction data DTWT [m]')
dev.off()
png('Example1_pointData_B.png')
sp::spplot(trainingData, 'DTWT.cats',scales = list(draw = TRUE), main='Training data DTWT [m]')
dev.off()
# Define the variogram model. This can be either a full variogram object (see `gstat:vgm`),
# which is then calibrated, or simply a type of variogram, as used here. When the type is input then
# the initial variogram parameters are estimated using the residuals of the observed head and the
# covariates, using ordinary least squares. Latter calibration of these parameters uses a range of 0.1
# and 10 times the initial estimates.
variogram.model = 'Mat';
# Define the covariates for the kriging.
f <- as.formula('head ~ elev + smoothing + log(MrVBF) + log(MrRTF)')
calib.results.example3 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 2.5),
pop.size.multiplier=4, debug.level=0, use.cluster = F)
library(HydroMap)
calib.results.example3 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 2.5),
pop.size.multiplier=4, debug.level=0, use.cluster = F)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
pkg.env$DEM.data
library(HydroMap)
clear.env()
library(HydroMap)
clear.env()
library(HydroMap)
clear.env()
library(HydroMap)
devtools::document()
library(HydroMap)
path <- find.package("HydroMap")
devtools::document()
devtools::document()
setwd("C:/Users/tpet0008/Documents/HydroMap")
devtools::document()
library(HydroMap)
clear.env()
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
calib.results.example3$inputs$grid
class(calib.results.example3$inputs$grid)
extent(calib.results.example3$inputs$grid)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
grid.asRaster
raster::plot(grid.asRaster)
raster::plot(grid.asRaster)
grid.asRaster
raster::plot(grid.asRaster)
colnames
grid
names(grid)
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
grid.asRaster = raster::raster(grid)
head.asRaster = raster::raster(head)
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
head.asRaster$DTWT = grid.asRaster[[1]] - head.asRaster$head
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
grid.asRaster = raster::raster(grid,layer=1)
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
names(grid)
names(grid)
colnames
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
names(grid.asRaster
names(grid.asRaster)
grid.asRaster
grid.asRaster
grid.asRaster
head.asRaster
class(head)
class(grid
)
sp::gridded(grid) = TRUE
grid.asRaster = raster::raster(grid)
head.asRaster = raster::raster(head)
grid.asRaster
head.asRaster
if (extend.DEM) {
grid.asRaster = raster::crop(grid.asRaster, DEM.extent.input)
head.asRaster = raster::crop(head.asRaster, DEM.extent.input)
}
library(HydroMap)
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
head.grid.example3$DTWT.cats =cut(head.grid.example3$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
library(HydroMap)
setwd("C:/Users/tpet0008/Documents/junk")
library(RSAGA)
# Setup RSAGA with the paths to the requuired modules. Note you will to do this yourself for your own
# installation of SAGA.
set.env(saga.path = 'C:/Program Files (x86)/saga-9.0.1_x64',saga.modules = 'C:/Program Files (x86)/saga-9.0.1_x64/tools')
# Load water table observations from  April 2000 for Victoria, Australia and a 250m state-wide DEM.
data('victoria.groundwater')
# Crop this stat-ewide DEM and data  points to a small in the centre north.
DEM <- raster::crop(raster::raster(DEM), raster::extent(2400000, 2500000, 2550000, 2650000))
DEM = as(DEM,'SpatialGridDataFrame')
obs.data <- raster::crop(obs.data, DEM, inverse = F)
# Load a model variogram and mapping parametyers found to be effective.
data('mapping.parameters')
# Calculate the depth to water table (DTWT)
obs.data$DTWT = obs.data$elev - obs.data$head
# Convert DTWT to catagories, to aid mapping
obs.data$DTWT.cats =cut(obs.data$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Enforce a minimum error variance of 5cm ^2 for the groundwater head elevation.
obs.data$total_err_var = pmax(obs.data$total_err_var, 0.05^2)
# Define the prediction data by randomly sample 25% of the observed data points.
# The remaining 75% of data points are used for the presictions.
nObs = nrow(obs.data);
nObs.prediction = floor(0.25*nObs)
set.seed(123456, sample.kind='default')
predictionData.index = sample(1:nObs, nObs.prediction, replace=F)
predictionData = obs.data[predictionData.index,]
trainingData = obs.data[-predictionData.index,]
# Plot the depth to water table of the prediction and training data
png('Example1_pointData_A.png')
sp::spplot(predictionData, 'DTWT.cats',scales = list(draw = TRUE), main='Prediction data DTWT [m]')
dev.off()
png('Example1_pointData_B.png')
sp::spplot(trainingData, 'DTWT.cats',scales = list(draw = TRUE), main='Training data DTWT [m]')
dev.off()
# Define the variogram model. This can be either a full variogram object (see `gstat:vgm`),
# which is then calibrated, or simply a type of variogram, as used here. When the type is input then
# the initial variogram parameters are estimated using the residuals of the observed head and the
# covariates, using ordinary least squares. Latter calibration of these parameters uses a range of 0.1
# and 10 times the initial estimates.
variogram.model = 'Mat';
# Define the covariates for the kriging.
f <- as.formula('head ~ elev')
# Calibrate the mapping parameters with 25% of the data randomly selected and using 2 cores.
# NOTE 1: The rigor of the calibration is best controlled using the pop.size.multiplier input.
# Here the size of the population of random guesses equals four time the number of calibration
# parameters.
calib.results.example1 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1,  smooth.std =NA,
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
# Do the interpolation of the point data using the calibration results.
# NOTE: All of the observed data is used for the calibration. All CPU cores are also used.
head.grid.example1 <- krige.head(calibration.results = calib.results.example1, data=obs.data, use.cluster = T)
# Map the head elevation and kriging uncertainty.
png('Example1_head.png')
plot(raster::raster(head.grid.example1,1), 'head')
raster::contour(raster::raster(head.grid.example1,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example1$DTWT.cats =cut(head.grid.example1$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example1_DTWT.png')
sp::spplot(head.grid.example1,'DTWT.cats', scales = list(draw = TRUE))
dev.off();# Define the covariates for the kriging.
f <- as.formula('head ~ elev + smoothing')
# Calibrate the mapping parameters with 25% of the data randomly selected and using 2 cores.
# NOTE: Here the smoothing parameter can between 0.5 and 2.5.
calib.results.example2 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 5.0),
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
# Do the interpolation of the point data using the calibration results.
# NOTE: All of the observed data is used for the calibration. All CPU cores are also used.
head.grid.example2 <- krige.head(calibration.results = calib.results.example2, data=obs.data, use.cluster = T)
# Map the head elevation and kriging uncertainty.
png('Example2_head.png')
plot(raster::raster(head.grid.example2,1), 'head')
raster::contour(raster::raster(head.grid.example2,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example2$DTWT.cats =cut(head.grid.example2$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example2_DTWT.png')
sp::spplot(head.grid.example2,'DTWT.cats', scales = list(draw = TRUE))
dev.off();# Define the covariates for the kriging.
f <- as.formula('head ~ elev + smoothing + log(MrVBF) + log(MrRTF)')
# Calibrate the mapping parameters with 25% of the data randomly selected and using 2 cores.
calib.results.example3 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 5.0),
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
# Do the interpolation of the point data using the calibration results.
# NOTE: All of the observed data is used for the calibration. All CPU cores are also used.
head.grid.example3 <- krige.head(calibration.results = calib.results.example3, data=obs.data, use.cluster = T)
# Map the head elevation and kriging uncertainty.
png('Example3_head.png')
plot(raster::raster(head.grid.example3,1), 'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example3$DTWT.cats =cut(head.grid.example3$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example3_DTWT.png')
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
plot(raster::raster(head.grid.example3,1), 'head')
head.grid.example3$head
plot(head.grid.example3$head)
raster::plot(head.grid.example3,layer='head')
plot(raster::raster(head.grid.example3),layer='head')
plot(raster::raster(head.grid.example3),layer='head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
plot(raster::raster(head.grid.example3,layer='head'))
plot(raster::raster(head.grid.example3,layer='head'))
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
plot(raster::raster(head.grid.example3),layer='head')
raster::plot(raster::raster(head.grid.example3),layer='head')
raster::plot(raster::raster(head.grid.example3),layer='head')
raster::plot(raster::raster(head.grid.example3),layer='head')
warnings()
raster::plot(raster::raster(head.grid.example3),layer='head')
raster::plot(raster::raster(head.grid.example3),'head')
raster::plot(raster::raster(head.grid.example3,'head'))
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
head.grid.example3$DTWT.cats =cut(head.grid.example3$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
sp::spplot(head.grid.example2,'DTWT.cats', scales = list(draw = TRUE))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
dev.off()
png('Example3_head.png')
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example2_DTWT.png')
sp::spplot(head.grid.example2,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example1_DTWT.png')
sp::spplot(head.grid.example1,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
dev.off()
# Map the categorised depth to water table.
png('Example2_DTWT.png')
sp::spplot(head.grid.example2,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example2_head.png')
raster::plot(raster::raster(head.grid.example2),'head')
raster::contour(raster::raster(head.grid.example2,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example1_head.png')
raster::plot(raster::raster(head.grid.example1),'head')
raster::contour(raster::raster(head.grid.example1,1), levels = seq(70,125,by=5), add=T)
dev.off()
dev.off()
# Map the head elevation and kriging uncertainty.
png('Example1_head.png')
raster::plot(raster::raster(head.grid.example1),'head')
raster::contour(raster::raster(head.grid.example1,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Define the covariates for the kriging.
f <- as.formula('head ~ elev')
# Calibrate the mapping parameters with 25% of the data randomly selected and using 2 cores.
# NOTE 1: The rigor of the calibration is best controlled using the pop.size.multiplier input.
# Here the size of the population of random guesses equals four time the number of calibration
# parameters.
calib.results.example1 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1,  smooth.std =NA,
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
# Do the interpolation of the point data using the calibration results.
# NOTE: All of the observed data is used for the calibration. All CPU cores are also used.
head.grid.example1 <- krige.head(calibration.results = calib.results.example1, data=obs.data, use.cluster = T)
# Map the head elevation and kriging uncertainty.
png('Example1_head.png')
raster::plot(raster::raster(head.grid.example1),'head')
raster::contour(raster::raster(head.grid.example1,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example1$DTWT.cats =cut(head.grid.example1$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example1_DTWT.png')
sp::spplot(head.grid.example1,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
par(mar = c(4, 4, 0.1, 0.1))
png('Example3_head.png')
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example3$DTWT.cats =cut(head.grid.example3$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example3_DTWT.png')
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
# Map the head elevation and kriging uncertainty.
png('Example3_head.png')
par(mar = c(4, 4, 0.1, 0.1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example3$DTWT.cats =cut(head.grid.example3$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example3_DTWT.png')
par(mar = c(4, 4, 0.1, 0.1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example3_head.png', width=400)
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head2.png')
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Map the head elevation and kriging uncertainty.
png('Example3_head2.png')
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head2.png')
par(mar = c(1, 1, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head.png')
par(mar = c(1, 1, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head.png')
par(mar = c(2, 2, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head.png')
par(mar = c(4, 4, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head.png')
par(mar = c(6, 6, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
png('Example3_head.png')
par(mar = c(2, 2, 1, 1))
raster::plot(raster::raster(head.grid.example3),'head')
raster::contour(raster::raster(head.grid.example3,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Map the categorised depth to water table.
png('Example3_DTWT.png')
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
# Map the categorised depth to water table.
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
# Map the categorised depth to water table.
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
raster::plot(as.raster(head.grid.example3),'DTWT.cats')
dev.off()
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
raster::plot(raster::as.raster(head.grid.example3),'DTWT.cats')
dev.off()
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
raster::plot(raster::raster(head.grid.example3),'DTWT.cats')
dev.off()
head.grid.example3
raster::raster(head.grid.example3,3)
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
raster::plot(raster::raster(head.grid.example3,3))
dev.off()
png('Example3_DTWT.png')
par(mar = c(2, 2, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example3_DTWT.png')
par(mar = c(6, 6, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example3_DTWT.png')
par(mar = c(1, 6, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
png('Example3_DTWT.png')
par(mar = c(1, 1, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
# Map the categorised depth to water table.
png('Example3_DTWT.png')
par(mar = c(1, 1, 1, 1))
sp::spplot(head.grid.example3,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
f <- as.formula('head ~ elev')
calib.results.example1 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var',
model = variogram.model,  fit.variogram.type=1,  smooth.std =NA,
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
exists(f)
exists('f')
library(HydroMap)
library(HydroMap)
calib.results.example1 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var',
model = variogram.model,  fit.variogram.type=1,  smooth.std =NA,
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
head.grid.example1 <- krige.head(calibration.results = calib.results.example1, data=obs.data, use.cluster = T)
# Map the head elevation and kriging uncertainty.
png('Example1_head.png')
raster::plot(raster::raster(head.grid.example1),'head')
raster::contour(raster::raster(head.grid.example1,1), levels = seq(70,125,by=5), add=T)
dev.off()
# Categorise the DTWT to seven classes.
head.grid.example1$DTWT.cats =cut(head.grid.example1$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Map the categorised depth to water table.
png('Example1_DTWT.png')
sp::spplot(head.grid.example1,'DTWT.cats', scales = list(draw = TRUE))
dev.off()
library(HydroMap)
setwd('C:/Users/tpet0008/Downloads/DEM ascii\DEM ascii')
setwd('C:/Users/tpet0008/Downloads/DEM ascii/DEM ascii')
DEM = import.DEM('vicmap_elev_dtm20.asc')
set.env(saga.path = 'C:/Program Files (x86)/saga-9.0.1_x64',saga.modules = 'C:/Program Files (x86)/saga-9.0.1_x64/tools')
DEM = import.DEM('vicmap_elev_dtm20.asc')
gc()
DEM = import.DEM('vicmap_elev_dtm20.asc')
set.env(saga.path = 'C:/Program Files (x86)/saga-9.0.1_x64',saga.modules = 'C:/Program Files (x86)/saga-9.0.1_x64/tools')
DEM = import.DEM('vicmap_elev_dtm20.asc')
?reclassify
??reclassify
??sp
??reclassify
rcl = matrix(NA,1,2)
rcl
rcl = matrix(NA,1,2); rcl[2]=NULL
grid2=as(grid, "SpatialPixelsDataFrame")
gc()
DEM = raster::raster('vicmap_elev_dtm20.asc')
rcl = matrx(NA,1,2);
rcl = matrix(NA,1,2);
rcl[1,2]
rcl[1,2]=NULL
plot(DEM)
DEM[is.na(DEM)] = NULL
summary(DEM)
DEM2=as(DEM, 'SpatialPixelsDataFrame')
library(HydroMap)
setwd("C:/Users/tpet0008/Downloads")
set.env(saga.path = 'C:/Program Files (x86)/saga-9.0.1_x64',saga.modules = 'C:/Program Files (x86)/saga-9.0.1_x64/tools')
# Load water table observations from  April 2000 for Victoria, Australia and a 250m state-wide DEM.
data('victoria.groundwater')
# Calculate the depth to water table (DTWT)
obs.data$DTWT = obs.data$elev - obs.data$head
# Convert DTWT to catagories, to aid mapping
obs.data$DTWT.cats =cut(obs.data$DTWT,breaks=c(-Inf,0,2,5,10,25,50, Inf ),
labels=c('<0m','0-2m','2-5m','5-10m','10-25m','25-50m','>50m'),include.lowest=T)
# Enforce a minimum error variance of 5cm ^2 for the groundwater head elevation.
obs.data$total_err_var = pmax(obs.data$total_err_var, 0.05^2)
# Define the prediction data by randomly sample 25% of the observed data points.
# The remaining 75% of data points are used for the presictions.
nObs = nrow(obs.data);
nObs.prediction = floor(0.25*nObs)
set.seed(123456, sample.kind='default')
predictionData.index = sample(1:nObs, nObs.prediction, replace=F)
predictionData = obs.data[predictionData.index,]
trainingData = obs.data[-predictionData.index,]
DEM = import.DEM('DEM_100m.asc')
library(HydroMap)
f <- as.formula('head ~ elev + smoothing')
calib.results.example2 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 5.0),
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
variogram.model = 'Mat';
calib.results.example2 <- krige.head.calib(formula=f, grid=DEM, data=trainingData, newdata=predictionData,
nmin=0, nmax=Inf, maxdist=Inf, omax=0, data.errvar.colname='total_err_var', model =
variogram.model,  fit.variogram.type=1, smooth.std = c(0.5, 5.0),
pop.size.multiplier=4, debug.level=0, use.cluster = 2)
setwd("C:/Users/tpet0008/Downloads")
DEM = raster::raster('vicmap_elev_dtm20.asc')
setwd("C:/Users/tpet0008/Downloads/DEM ascii/DEM ascii")
DEM = raster::raster('vicmap_elev_dtm20.asc')
DEM.extent = raster::extent(DEM)
DEM.100m = raster::raster(NA, ext=DEM.100m, res=100)
DEM.100m = raster::raster(NA, ext=DEM.extent, res=100)
DEM.100m = raster::raster(NA, ext=DEM.extent, resolution=100)
DEM.100m = raster::raster(ext=DEM.extent, resolution=100)
summary(DEM)
summary(DEM.100m)
summary(DEM.extent)
DEM.extent
